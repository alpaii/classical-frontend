import React, { useEffect, useState, useRef } from 'react'
import axios from 'axios'
import {
  CRow,
  CCol,
  CCard,
  CCardBody,
  CButton,
  CForm,
  CFormInput,
  CFormLabel,
  CModal,
  CModalBody,
  CModalFooter,
  CModalHeader,
  CModalTitle,
  CTable,
  CTableBody,
  CTableDataCell,
  CTableHead,
  CTableHeaderCell,
  CTableRow,
} from '@coreui/react'
import CIcon from '@coreui/icons-react'
import { cilPlus, cilPencil, cilX } from '@coreui/icons'
// import { set } from '@core-js/core/dict'

const API_URL = 'http://127.0.0.1:8000/api/composers/'

const Composer = () => {
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [composers, setComposers] = useState([]) // composer list

  const [addComposer, setAddComposer] = useState({ name: '', full_name: '' }) // add new
  const [modalAddVisible, setModalAddVisible] = useState(false) // add new modal
  const nameAddInputRef = useRef(null) // focus

  const [updateComposer, setUpdateComposer] = useState({ id: '', name: '', full_name: '' }) // update
  const [modalUpdateVisible, setModalUpdateVisible] = useState(false) // update modal
  const nameUpdateInputRef = useRef(null) // focus

  const [deleteComposer, setDeleteComposer] = useState({ id: '' }) // delete
  const [modalDeleteVisible, setModalDeleteVisible] = useState(false) // delete modal

  const [searchQuery, setSearchQuery] = useState('') // search

  // üìå ÏÑúÎ≤ÑÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    fetchComposers()
  }, [])

  const fetchComposers = async () => {
    setLoading(true)
    try {
      const response = await axios.get(API_URL)
      setComposers(response.data)
    } catch (err) {
      setError('Failed to load composers')
    } finally {
      setLoading(false)
    }
  }

  // üìå Composer Í≤ÄÏÉâ Í∏∞Îä•
  const searchComposer = async (e) => {
    e.preventDefault() // Í∏∞Î≥∏ Ìèº Ï†úÏ∂ú ÎèôÏûë Î∞©ÏßÄ
    setLoading(true)

    try {
      const response = await axios.get(`${API_URL}?search=${searchQuery}`)
      setComposers(response.data)
    } catch (err) {
      setError('Failed to search composers')
    } finally {
      setLoading(false)
    }
  }

  // üìå Add Î™®Îã¨Ïù¥ Ïó¥Î¶¥ Îïå name inputÏóê ÏûêÎèô Ìè¨Ïª§Ïä§
  useEffect(() => {
    if (modalAddVisible) {
      setTimeout(() => nameAddInputRef.current?.focus(), 200) // ‚úÖ Î™®Îã¨Ïù¥ Ïó¥Î¶¨Î©¥ name ÌïÑÎìúÏóê Ìè¨Ïª§Ïä§
    }
  }, [modalAddVisible])

  // üìå Edit Î™®Îã¨Ïù¥ Ïó¥Î¶¥ Îïå name inputÏóê ÏûêÎèô Ìè¨Ïª§Ïä§
  useEffect(() => {
    if (modalUpdateVisible) {
      setTimeout(() => nameUpdateInputRef.current?.focus(), 200) // ‚úÖ Î™®Îã¨Ïù¥ Ïó¥Î¶¨Î©¥ name ÌïÑÎìúÏóê Ìè¨Ïª§Ïä§
    }
  }, [modalUpdateVisible])

  // üìå ÏÉà ÏûëÍ≥°Í∞Ä Ï∂îÍ∞Ä Ìï®Ïàò
  const runAddComposer = async () => {
    if (!addComposer.name || !addComposer.full_name) {
      alert('Please enter both name and full name')
      return
    }

    try {
      const response = await axios.post(API_URL, addComposer) // ÏÑúÎ≤ÑÏóê Ï∂îÍ∞Ä ÏöîÏ≤≠
      fetchComposers() // Îã§Ïãú Î∂àÎü¨Ïò§Í∏∞
      setModalAddVisible(false)
      setAddComposer({ name: '', full_name: '' }) // ÏûÖÎ†• ÌïÑÎìú Ï¥àÍ∏∞Ìôî
    } catch (err) {
      alert('Failed to add composer')
    }
  }

  // üìå Ìé∏Ïßë ÎÇ¥Ïö© Ï†ÄÏû• (ÏóÖÎç∞Ïù¥Ìä∏)
  const runUpdateComposer = async () => {
    try {
      await axios.put(`${API_URL}${updateComposer.id}/`, updateComposer) // Django APIÏóê PUT ÏöîÏ≤≠
      fetchComposers() // Î™©Î°ù Í∞±Ïã†
      setModalUpdateVisible(false)
    } catch (err) {
      alert('Failed to update composer')
    }
  }

  // üìå Ìé∏Ïßë Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú (delete)
  const runDeleteComposer = async () => {
    try {
      await axios.delete(`${API_URL}${deleteComposer.id}/`) // Django APIÏóê PUT ÏöîÏ≤≠
      fetchComposers() // Î™©Î°ù Í∞±Ïã†
      setModalDeleteVisible(false)
    } catch (err) {
      alert('Failed to delete composer')
    }
  }

  return (
    <CRow>
      <CCol xs={12}>
        <CCard className="mb-4 border-primary bg-primary-light">
          <CCardBody>
            <CRow>
              <CForm className="row ms-2 gy-1 gx-3 align-items-center" onSubmit={searchComposer}>
                <CCol xs="auto">
                  <CFormLabel>Composer</CFormLabel>
                </CCol>
                <CCol xs="auto">
                  <CFormInput
                    type="text"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="border border-primary"
                  />
                </CCol>
                <CCol xs="auto">
                  <CButton color="primary" type="submit">
                    Search
                  </CButton>
                </CCol>
                <CCol xs="auto" className="ms-auto me-4">
                  <CButton
                    color="info"
                    className="text-white"
                    onClick={() => setModalAddVisible(true)}
                  >
                    <CIcon icon={cilPlus} size="l" className="me-2" />
                    Add Composer
                  </CButton>
                </CCol>
              </CForm>{' '}
            </CRow>
          </CCardBody>
        </CCard>
        <CCard className="mb-4 border-primary border-2">
          <CCardBody>
            <CTable bordered striped hover style={{ width: '1000px' }} className="border-info">
              <CTableHead color="primary" className=" border-2">
                <CTableRow>
                  <CTableHeaderCell scope="col" className="col-4 text-center">
                    Name
                  </CTableHeaderCell>
                  <CTableHeaderCell scope="col" className="col-6 text-center">
                    Full Name
                  </CTableHeaderCell>
                  <CTableHeaderCell scope="col" className="col-2 text-center">
                    Actions
                  </CTableHeaderCell>
                </CTableRow>
              </CTableHead>
              <CTableBody>
                {/* ‚úÖ Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏÉÅÌÉú */}
                {loading && (
                  <CTableRow>
                    <CTableDataCell colSpan={3} className="text-center">
                      Loading...
                    </CTableDataCell>
                  </CTableRow>
                )}

                {/* ‚úÖ ÏóêÎü¨ Î∞úÏÉù Ïãú Î©îÏãúÏßÄ */}
                {error && (
                  <CTableRow>
                    <CTableDataCell colSpan={3} className="text-center text-danger">
                      {error}
                    </CTableDataCell>
                  </CTableRow>
                )}

                {/* ‚úÖ ÏÑúÎ≤ÑÏóêÏÑú Í∞ÄÏ†∏Ïò® ÏûëÍ≥°Í∞Ä Î™©Î°ù */}
                {!loading &&
                  !error &&
                  composers.map((composer) => (
                    <CTableRow key={composer.id}>
                      <CTableDataCell>{composer.name}</CTableDataCell>
                      <CTableDataCell>{composer.full_name}</CTableDataCell>
                      <CTableDataCell className="text-center">
                        <CButton
                          color="info"
                          variant="ghost"
                          size="sm"
                          onClick={() => {
                            setModalUpdateVisible(true)
                            setUpdateComposer({
                              id: composer.id,
                              name: composer.name,
                              full_name: composer.full_name,
                            })
                          }}
                          className="hover-white me-2"
                        >
                          <CIcon icon={cilPencil} size="l" />
                        </CButton>
                        <CButton
                          color="danger"
                          variant="ghost"
                          size="sm"
                          onClick={() => {
                            setDeleteComposer({ id: composer.id })
                            setModalDeleteVisible(true)
                          }}
                          className="hover-white"
                        >
                          <CIcon icon={cilX} size="l" />
                        </CButton>
                      </CTableDataCell>
                    </CTableRow>
                  ))}
              </CTableBody>
            </CTable>
          </CCardBody>
        </CCard>
      </CCol>

      {/* ‚úÖ Add Î™®Îã¨ Ï∞Ω Ï∂îÍ∞Ä */}
      <CModal visible={modalAddVisible} onClose={() => setModalAddVisible(false)}>
        <CModalHeader>
          <CModalTitle>Add Composer</CModalTitle>
        </CModalHeader>
        <CModalBody>
          <CForm>
            <CFormLabel>Name</CFormLabel>
            <CFormInput
              ref={nameAddInputRef} // ‚úÖ `ref`Î•º Ï∂îÍ∞ÄÌïòÏó¨ ÏûêÎèô Ìè¨Ïª§Ïä§ Ï†ÅÏö©
              type="text"
              value={addComposer.name}
              onChange={(e) => setAddComposer({ ...addComposer, name: e.target.value })}
              className="border border-dark"
            />
            <CFormLabel className="mt-3">Full Name</CFormLabel>
            <CFormInput
              type="text"
              value={addComposer.full_name}
              onChange={(e) => setAddComposer({ ...addComposer, full_name: e.target.value })}
              className="border border-dark"
            />
          </CForm>
        </CModalBody>
        <CModalFooter>
          <CButton color="secondary" onClick={() => setModalAddVisible(false)}>
            Close
          </CButton>
          <CButton color="info" onClick={runAddComposer} className="text-white">
            Save
          </CButton>
        </CModalFooter>
      </CModal>

      {/* ‚úÖ Edit Î™®Îã¨ Ï∞Ω Ï∂îÍ∞Ä */}
      <CModal visible={modalUpdateVisible} onClose={() => setModalUpdateVisible(false)}>
        <CModalHeader>
          <CModalTitle>Edit Composer</CModalTitle>
        </CModalHeader>
        <CModalBody>
          <CForm>
            <CFormLabel>Name</CFormLabel>
            <CFormInput
              ref={nameUpdateInputRef} // ‚úÖ `ref`Î•º Ï∂îÍ∞ÄÌïòÏó¨ ÏûêÎèô Ìè¨Ïª§Ïä§ Ï†ÅÏö©
              type="text"
              value={updateComposer.name}
              onChange={(e) => setUpdateComposer({ ...updateComposer, name: e.target.value })}
              className="border border-dark"
            />
            <CFormLabel className="mt-3">Full Name</CFormLabel>
            <CFormInput
              type="text"
              value={updateComposer.full_name}
              onChange={(e) => setUpdateComposer({ ...updateComposer, full_name: e.target.value })}
              className="border border-dark"
            />
          </CForm>
        </CModalBody>
        <CModalFooter>
          <CButton color="secondary" onClick={() => setModalUpdateVisible(false)}>
            Close
          </CButton>
          <CButton color="info" onClick={runUpdateComposer} className="text-white">
            Save
          </CButton>
        </CModalFooter>
      </CModal>

      {/* ÏÇ≠Ï†ú ÌôïÏù∏ Î™®Îã¨ */}
      <CModal visible={modalDeleteVisible} onClose={() => setModalDeleteVisible(false)}>
        <CModalBody>Delete this item?</CModalBody>
        <CModalFooter>
          <CButton color="secondary" onClick={() => setModalDeleteVisible(false)}>
            Close
          </CButton>
          <CButton color="danger" onClick={runDeleteComposer} className="text-white">
            Delete
          </CButton>
        </CModalFooter>
      </CModal>
    </CRow>
  )
}

export default Composer
